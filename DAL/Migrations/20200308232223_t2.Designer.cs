// <auto-generated />
using System;
using DAL.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20200308232223_t2")]
    partial class t2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entites.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("Enable");

                    b.Property<string>("FullName");

                    b.Property<string>("OtherContact")
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .HasMaxLength(14);

                    b.Property<string>("ProfilePicture");

                    b.Property<string>("Status");

                    b.Property<int>("UserId");

                    b.Property<int>("Wallet");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DAL.Entites.Account_Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("TagId");

                    b.ToTable("Account_Tag");
                });

            modelBuilder.Entity("DAL.Entites.AdvertisementPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool?>("Garanty");

                    b.Property<string>("PageId");

                    b.Property<string>("Picture");

                    b.Property<int?>("Price");

                    b.Property<string>("Title")
                        .HasMaxLength(70);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("AdvertisementPlans");
                });

            modelBuilder.Entity("DAL.Entites.Advertisement_Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementPlanId");

                    b.Property<int>("AdvertisementServiceId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementPlanId");

                    b.HasIndex("TagId");

                    b.ToTable("Advertisement_Tag");
                });

            modelBuilder.Entity("DAL.Entites.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName");

                    b.Property<string>("Lang");

                    b.Property<string>("Lat");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DAL.Entites.ClientRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdvertisementServiceId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("Enable");

                    b.Property<string>("Status");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ClientRequests");
                });

            modelBuilder.Entity("DAL.Entites.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasMaxLength(1000);

                    b.Property<int>("ParentId");

                    b.Property<int?>("Point");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DAL.Entites.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("HappendTime");

                    b.Property<string>("Url");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DAL.Entites.FileTbl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FileType");

                    b.Property<string>("MetaData");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("FileTbls");
                });

            modelBuilder.Entity("DAL.Entites.GraphicDesigningPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<bool>("Enable");

                    b.Property<int?>("Price");

                    b.Property<string>("Sample1");

                    b.Property<string>("Sample2");

                    b.Property<string>("Sample3");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("GraphicDesigningPlans");
                });

            modelBuilder.Entity("DAL.Entites.GraphicDesigningPlan_Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GraphicDesigningPlanId");

                    b.Property<int>("GraphicDesigningServiceId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("GraphicDesigningPlanId");

                    b.HasIndex("TagId");

                    b.ToTable("GraphicDesigningPlan_Tag");
                });

            modelBuilder.Entity("DAL.Entites.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<int>("Amount");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DAL.Entites.OrderOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementServiceId");

                    b.Property<int>("Amount");

                    b.Property<int>("Count");

                    b.Property<int?>("GraphicDesigningServiceId");

                    b.Property<int>("OrederId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisementServiceId");

                    b.HasIndex("GraphicDesigningServiceId");

                    b.HasIndex("OrederId");

                    b.ToTable("OrderOptions");
                });

            modelBuilder.Entity("DAL.Entites.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<int?>("AreaId");

                    b.Property<int>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("FollowersNumber");

                    b.Property<bool?>("IsBasePage");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LogoUrl");

                    b.Property<string>("PageAddress");

                    b.Property<string>("PageCategory");

                    b.Property<string>("PageName");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("DAL.Entites.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("BankId");

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<int>("Status");

                    b.Property<string>("TrackingCode");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DAL.Entites.RefereeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminDescription")
                        .HasMaxLength(4000);

                    b.Property<int?>("AdvertisementServiceId");

                    b.Property<int?>("GraphicDesigningServiceId");

                    b.Property<string>("ServiceProvidersDescription")
                        .HasMaxLength(4000);

                    b.Property<int>("Status");

                    b.Property<string>("UserDescription")
                        .HasMaxLength(4000);

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefereeRequests");
                });

            modelBuilder.Entity("DAL.Entites.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("DAL.Entites.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .HasMaxLength(60);

                    b.Property<string>("Role")
                        .HasMaxLength(10);

                    b.Property<string>("Token");

                    b.Property<string>("Username")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entites.Account", b =>
                {
                    b.HasOne("DAL.Entites.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("DAL.Entites.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Account_Tag", b =>
                {
                    b.HasOne("DAL.Entites.Account", "Account")
                        .WithMany("Account_Tag")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DAL.Entites.Tag", "Tag")
                        .WithMany("Account_Tags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.AdvertisementPlan", b =>
                {
                    b.HasOne("DAL.Entites.Account")
                        .WithMany("AdvertisementServices")
                        .HasForeignKey("AccountId");

                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Advertisement_Tag", b =>
                {
                    b.HasOne("DAL.Entites.AdvertisementPlan", "AdvertisementPlan")
                        .WithMany("Advertisement_Tags")
                        .HasForeignKey("AdvertisementPlanId");

                    b.HasOne("DAL.Entites.Tag", "Tag")
                        .WithMany("Advertisement_Tags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.ClientRequest", b =>
                {
                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Comment", b =>
                {
                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Event", b =>
                {
                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.GraphicDesigningPlan", b =>
                {
                    b.HasOne("DAL.Entites.Account")
                        .WithMany("GraphicDesigningServices")
                        .HasForeignKey("AccountId");
                });

            modelBuilder.Entity("DAL.Entites.GraphicDesigningPlan_Tag", b =>
                {
                    b.HasOne("DAL.Entites.GraphicDesigningPlan", "GraphicDesigningPlan")
                        .WithMany("GraphicDesigningService_Tags")
                        .HasForeignKey("GraphicDesigningPlanId");

                    b.HasOne("DAL.Entites.Tag", "Tag")
                        .WithMany("GraphicDesigningService_Tags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Order", b =>
                {
                    b.HasOne("DAL.Entites.Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId");

                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.OrderOption", b =>
                {
                    b.HasOne("DAL.Entites.AdvertisementPlan", "AdvertisementPlan")
                        .WithMany("OrderOptions")
                        .HasForeignKey("AdvertisementServiceId");

                    b.HasOne("DAL.Entites.GraphicDesigningPlan", "GraphicDesigningPlan")
                        .WithMany("OrderOptions")
                        .HasForeignKey("GraphicDesigningServiceId");

                    b.HasOne("DAL.Entites.Order", "Order")
                        .WithMany("AdvertisementServices")
                        .HasForeignKey("OrederId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Page", b =>
                {
                    b.HasOne("DAL.Entites.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.Payment", b =>
                {
                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DAL.Entites.RefereeRequest", b =>
                {
                    b.HasOne("DAL.Entites.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
